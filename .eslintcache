[{"C:\\Users\\user\\reactprojects\\weatherity\\src\\index.js":"1","C:\\Users\\user\\reactprojects\\weatherity\\src\\context.js":"2","C:\\Users\\user\\reactprojects\\weatherity\\src\\App.js":"3","C:\\Users\\user\\reactprojects\\weatherity\\src\\body.js":"4","C:\\Users\\user\\reactprojects\\weatherity\\src\\header.js":"5","C:\\Users\\user\\reactprojects\\weatherity\\src\\cards.js":"6","C:\\Users\\user\\reactprojects\\weatherity\\src\\data.js":"7","C:\\Users\\user\\reactprojects\\weatherity\\src\\search.js":"8"},{"size":273,"mtime":1610896904188,"results":"9","hashOfConfig":"10"},{"size":7822,"mtime":1621884942336,"results":"11","hashOfConfig":"10"},{"size":203,"mtime":1610902069772,"results":"12","hashOfConfig":"10"},{"size":538,"mtime":1610902261850,"results":"13","hashOfConfig":"10"},{"size":1059,"mtime":1611530961722,"results":"14","hashOfConfig":"10"},{"size":9844,"mtime":1611536586833,"results":"15","hashOfConfig":"10"},{"size":156,"mtime":1611172678683,"results":"16","hashOfConfig":"10"},{"size":1041,"mtime":1611174249871,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"17xsvcd",{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"C:\\Users\\user\\reactprojects\\weatherity\\src\\index.js",[],["39","40"],"C:\\Users\\user\\reactprojects\\weatherity\\src\\context.js",["41","42","43"],"C:\\Users\\user\\reactprojects\\weatherity\\src\\App.js",[],"C:\\Users\\user\\reactprojects\\weatherity\\src\\body.js",["44"],"import React,{useContext} from 'react';\r\nimport Card from './cards'\r\nimport {useGlobalContext} from './context';\r\n\r\nconst Body = () => {\r\n    const {state} = useGlobalContext();\r\n    \r\n    console.log(state);\r\n    return ( \r\n    <div className='wrapper-container'>\r\n     \r\n    <div className='body-container'>\r\n            {state.map(card =>{\r\n                \r\n                 return <Card key={card.id} prob={card}/>\r\n            })}\r\n             </div>\r\n             \r\n             </div>\r\n             );\r\n}\r\n \r\nexport default Body;","C:\\Users\\user\\reactprojects\\weatherity\\src\\header.js",["45"],"import React from \"react\";\r\nimport { links } from \"./data\";\r\nimport Search from \"./search\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport Logo from \"./img/Logo2.png\";\r\n\r\nconst Header = () => {\r\n  const { temp, cond, userCity } = useGlobalContext();\r\n\r\n  return (\r\n    <div className=\"main-header\">\r\n      <div className=\"header-container\">\r\n        <div className=\"logo-container\">\r\n          <img className=\"logo\" src={Logo}></img>\r\n        </div>\r\n\r\n        <h4 className=\"user-temp\">\r\n          The current Weather in {userCity}:\r\n          <div>\r\n            {temp}\r\n            <i>Â°C </i> {cond}\r\n          </div>{\" \"}\r\n        </h4>\r\n      </div>\r\n      <div className=\"second-header\">\r\n        <Search />\r\n      </div>\r\n\r\n      <div className=\"links-container\">\r\n        {links.map((link) => {\r\n          const { id, name, url } = link;\r\n          return (\r\n            <a href={url} className=\"links\" key={id}>\r\n              {name}\r\n            </a>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","C:\\Users\\user\\reactprojects\\weatherity\\src\\cards.js",["46","47","48","49","50"],"import React from 'react';\r\nimport { WiThermometer,WiCloudy,WiDaySunny,WiSnow,WiFog,WiNightAltCloudy,WiHot,WiStrongWind,WiDayCloudy,WiShowers,WiCelsius,WiDayShowers,WiNightClear,WiNightAltPartlyCloudy } from \"weather-icons-react\";\r\nimport { useGlobalContext} from './context'\r\nimport {AiOutlineClose,AiOutlineInfoCircle} from 'react-icons/ai'\r\nimport { GiSunrise,GiSunset} from 'react-icons/gi'\r\n\r\n\r\n\r\nconst Card = (state) => {\r\n    const {cityName,dayName,countryName,uv,currentTemp,sunRise,sunSet,maxTemp,minTemp,windSpeed,nextWeather,weatherDescription,isDay,countryHour}= state.prob;\r\n    const {weatherA,weatherB,weatherC,weatherD}= nextWeather;\r\n    \r\n    const {toggleInfo1,showInfo1,toggleInfo2,toggleInfo,animateClass} = useGlobalContext();\r\n\r\n    const background = (cond,isDay) =>{\r\n        \r\n        if (cond.toLowerCase() === 'clear'&& isDay ===1) {\r\n            return 'dayClear'\r\n        } \r\n        if (cond.toLowerCase() === 'clear'&& isDay ===0) {\r\n            return \"nightClear\" \r\n        }\r\n        if (cond.toLowerCase() ==='sunny'&& isDay ===1) {\r\n            return 'dayClear'\r\n        } \r\n        \r\n        if (cond.toLowerCase() === ('cloudy' || 'overcast')&& isDay ===1) {\r\n            return \"dayCloudy\" \r\n        }\r\n        \r\n        if (cond.toLowerCase() === ('cloudy'|| 'overcast')&& isDay ===0) {\r\n            return \"nightCloudy\" \r\n        }\r\n        if (cond.toLowerCase() === 'overcast'&& isDay ===0) {\r\n            return \"nightCloudy\" \r\n        }\r\n        if (cond.toLowerCase() === 'moderate rain at times'&& isDay ===0) {\r\n            return \"nightRainy\" \r\n        }\r\n        if (cond.toLowerCase() === 'moderate rain at times'&& isDay ===1) {\r\n            return \"dayRainy\" \r\n        }\r\n        if (cond.toLowerCase().search('rain') > -1&& isDay ===1) {\r\n            return \"dayRainy\" \r\n        }\r\n        if (cond.toLowerCase().search('rain') > -1&& isDay ===0) {\r\n            return \"nightRainy\" \r\n        }\r\n        \r\n        if (cond.toLowerCase() === 'overcast'&& isDay ===1) {\r\n            return \"dayCloudy\" \r\n        }\r\n        \r\n        if (cond.toLowerCase() === 'partly cloudy'&& isDay ===1) {\r\n            return \"dayCloudy\"\r\n        }\r\n        if (cond.toLowerCase() === 'partly cloudy'&& isDay ===0) {\r\n            return \"nightCloudy\"\r\n        }\r\n        if (cond.toLowerCase() === 'mist'&& isDay ===1) {\r\n            return \"dayMisty\"\r\n        }\r\n        if (cond.toLowerCase() === 'fog'&& isDay ===1) {\r\n            return \"dayMisty\"\r\n        }\r\n        if (cond.toLowerCase() === 'mist'&& isDay ===0) {\r\n            return \"nightMisty\"\r\n        }\r\n        if (cond.toLowerCase() === 'fog'&& isDay ===0) {\r\n            return \"nightMisty\"\r\n        }\r\n        \r\n        if (cond.toLowerCase() === 'light rain'&& isDay ===0) {\r\n            return \"nightRainy\"\r\n        }\r\n        if (cond.toLowerCase() === 'light rain shower'&& isDay ===0) {\r\n            return \"nightRainy\"\r\n        }\r\n        if (cond.toLowerCase() === 'rainy'&& isDay ===0) {\r\n            return \"nightRainy\"\r\n        }\r\n        if (cond.toLowerCase() === 'light rain'&& isDay ===1) {\r\n            return \"dayRainy\"\r\n        }\r\n        if (cond.toLowerCase() === 'light snow'&& isDay ===1) {\r\n            return \"daySnowy\"\r\n        }\r\n        if (cond.toLowerCase() === 'snow'&& isDay ===1) {\r\n            return \"daySnowy\"\r\n        }\r\n        if (cond.toLowerCase() === 'light snow'&& isDay ===0) {\r\n            return \"nightSnowy\"\r\n        }\r\n        if (cond.toLowerCase() === 'snow'&& isDay ===0) {\r\n            return \"nightSnowy\"\r\n        }\r\n        if (cond.toLowerCase() === 'light rain shower'&& isDay ===1) {\r\n            return \"dayRainy\"\r\n        }\r\n        if (cond.toLowerCase() === 'rainy'&& isDay ===1) {\r\n            return \"dayRainy\"\r\n        }\r\n        if (cond.toLowerCase() === ('light rain shower'|| 'rainy'|| 'light rain')&& isDay ===1) {\r\n            return \"dayRainy\"\r\n        }\r\n        if (cond.toLowerCase().search('snow') > -1&& isDay ===1) {\r\n            return \"daySnowy\" \r\n        }\r\n        if (cond.toLowerCase().search('snow') > -1&& isDay ===0) {\r\n            return \"nightSnowy\" \r\n        }\r\n        \r\n        else {\r\n            console.log('error in weather background');}\r\n    \r\n    }\r\n    \r\n    const icons = (cond,isDay) =>{\r\n            \r\n            if (cond.toLowerCase().search('mist') > -1) {\r\n                return <WiFog size={32}/> \r\n            }\r\n            if (cond.toLowerCase() === 'clear'&& isDay ===1) {\r\n                return <WiDaySunny size={32}/> \r\n            }\r\n            if (cond.toLowerCase() === 'sunny'&& isDay ===1) {\r\n                return <WiDaySunny size={32}/> \r\n            } \r\n            if (cond.toLowerCase() === 'clear'&& isDay ===0) {\r\n                return <WiNightClear size={32}/> \r\n            } \r\n            if (cond.toLowerCase() === 'cloudy') {\r\n                return <WiCloudy size={32}/> \r\n            }\r\n            if (cond.toLowerCase() === ('snowy'|| 'snow')) {\r\n                return <WiSnow size={32}/> \r\n            }\r\n            if (cond.toLowerCase().search('snow') > -1) {\r\n                return <WiSnow size={32}/> \r\n            }\r\n            if (cond.toLowerCase().search('partly cloudy') > -1 && isDay ===0) {\r\n                return <WiNightAltPartlyCloudy size={32}/>\r\n            }\r\n            if (cond.toLowerCase().search('partly cloudy') > -1 && isDay ===1) {\r\n                return <WiDayCloudy size={32}/>\r\n            }\r\n            if (cond.toLowerCase() === ('light rain shower'|| 'rainy'|| 'light rain')) {\r\n                return <WiShowers size={32}/> \r\n            }\r\n            if (cond.toLowerCase().search('rain') > -1 ) {\r\n                return <WiShowers size={32}/>\r\n            }\r\n            if (cond.toLowerCase() ==='overcast'&& isDay ===0) {\r\n                return <WiNightAltCloudy size={32}/> \r\n            }\r\n            \r\n            if (cond.toLowerCase() ==='overcast'&& isDay ===1) {\r\n                return <WiDayCloudy size={32}/> \r\n            }\r\n            else {\r\n                return <WiCloudy size={32}/>}\r\n        \r\n    }\r\n\r\n    \r\n    // const [isDayB,condB,tempB] = weatherB;\r\n    // const [isDayC,condC,tempC] = weatherC;\r\n    // const [isDayD,condD,tempD] = weatherD;\r\n    // console.log(isDayD,condC,tempB);\r\n    \r\n    return ( <div className={`cards ${background(weatherA[1],weatherA[0])}`}>\r\n        <div className='card-head' >\r\n        \r\n    <div className='weather-status'>\r\n        <div className='card-body'>\r\n        <div className='temp-box'>\r\n    <h2 className='temp'>\r\n        {currentTemp}<WiCelsius size={69} viewBox={\"8 0 30 30\"}/>\r\n    </h2>\r\n\r\n    <h3 className='chilly'>{weatherA[0] ===1?\" (Day)\":\"(Night)\"}</h3>\r\n        <h3 className='chilly'>{weatherA[1]}</h3>\r\n        </div>\r\n        <div className='location'>\r\n            <h4 className='location-a'>{countryName}, {cityName}</h4>\r\n        </div>\r\n        </div>  \r\n    </div>\r\n    \r\n    </div>\r\n    <div className='card-fotter'>\r\n        <div className='card-nav'>\r\n            <h3>{dayName}</h3>\r\n            <div>\r\n                 <span>\r\n                     <button className='temp-nav-btn'onClick={()=>toggleInfo()}>\r\n                     <WiThermometer size={26}/>\r\n                     </button>\r\n                     <button className='temp-nav-btn' onClick={()=>toggleInfo1()}>\r\n                     <AiOutlineInfoCircle size={24}/>\r\n                     </button>\r\n                     <button className='temp-nav-btn' onClick={()=>toggleInfo2()}>\r\n                     <WiDaySunny size={26}/>\r\n                     </button>\r\n                     </span> \r\n             </div>\r\n        </div>\r\n        <div className='line'></div>\r\n        <div className = {`fotter-nav ${animateClass()}`}>\r\n        \r\n        <div className='weather-data'>\r\n            <div className=\"data-column data-1\">\r\n                <p>Now</p>\r\n                {icons(weatherA[1],weatherA[0])}\r\n                <p>{currentTemp}</p>\r\n            </div>\r\n            <div className=\"data-column data-1\">\r\n                <p>{countryHour + 1=== 24?0:countryHour +1}:00</p>\r\n                {icons(weatherB[1],weatherB[0])}\r\n                <p>{weatherB[2]}</p>\r\n            </div>\r\n            <div className=\"data-column data-1\">\r\n                <p>{countryHour +2=== 25?1:countryHour +2}:00</p>\r\n                {icons(weatherC[1],weatherC[0])}\r\n                <p>{weatherC[2]}</p>\r\n            </div>\r\n            <div className=\"data-column data-1\">\r\n                <p>{countryHour +3=== 26?2:countryHour +3}:00</p>\r\n                {icons(weatherD[1],weatherD[0])}\r\n                <p>{weatherD[2]}</p>\r\n            </div>\r\n        </div>\r\n        <div className='info-data'>\r\n            <div className='day-temp'>\r\n                <p>High / Low</p>\r\n                <WiCelsius size={40} />\r\n                <p>{maxTemp} / {minTemp}</p>\r\n                \r\n            </div>\r\n            <div className='day-temp'>\r\n                <p>Wind speed</p>\r\n                <WiStrongWind size={39} fill={'rgb(112, 141, 204)'}/>\r\n                <p>{windSpeed} /kph</p>\r\n            </div>\r\n            <div className='day-temp'>\r\n                <p>UV</p>\r\n                <WiHot size={39} fill={'rgb(165, 132, 70)'}/>\r\n                <p>{uv}</p>\r\n            </div>\r\n        </div>\r\n        <div className='info-data2'>\r\n            \r\n                <div>\r\n                    <GiSunrise size={33}/>\r\n                    <p>sunrise</p>\r\n                    <p>{sunRise}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <GiSunset size={33}/>\r\n                    <p>Sunset</p>\r\n                    <p>{sunSet}</p>\r\n                </div>\r\n                \r\n                 \r\n\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </div> );\r\n}\r\n \r\nexport default Card;","C:\\Users\\user\\reactprojects\\weatherity\\src\\data.js",[],"C:\\Users\\user\\reactprojects\\weatherity\\src\\search.js",["51","52"],"import React,{useState} from 'react';\r\nimport {useGlobalContext} from './context'\r\nimport { BiSearchAlt} from 'react-icons/bi'\r\n\r\n\r\nconst Search = () => {\r\n    const {searchCity} = useGlobalContext();\r\n    const [city,setCity]= useState('')\r\n    const [unit,setUnit]= useState('C')\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        searchCity(city)\r\n        setCity('')\r\n    }\r\n    return ( \r\n        <form className='form' onSubmit={handleSubmit}> \r\n            <p>add location</p>\r\n\r\n            <label htmlFor='city'>City: </label>\r\n            <div className='input' >\r\n            <input className='input-bar' placeholder='add location...' type='text' id='city' value={city} onChange={(e)=>setCity(e.target.value) }></input>\r\n            <div className ='search-icon'>\r\n            <button className='submit-btn' type='submit'><BiSearchAlt size={35} fill='#f5f5f5'/></button>\r\n            \r\n            </div>\r\n            </div>\r\n            \r\n            \r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Search;",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":45,"nodeType":"59","messageId":"60","endLine":1,"endColumn":56},{"ruleId":"57","severity":1,"message":"61","line":96,"column":15,"nodeType":"59","messageId":"60","endLine":96,"endColumn":19},{"ruleId":"62","severity":1,"message":"63","line":219,"column":7,"nodeType":"64","endLine":219,"endColumn":13,"suggestions":"65"},{"ruleId":"57","severity":1,"message":"66","line":1,"column":15,"nodeType":"59","messageId":"60","endLine":1,"endColumn":25},{"ruleId":"67","severity":1,"message":"68","line":14,"column":11,"nodeType":"69","endLine":14,"endColumn":44},{"ruleId":"57","severity":1,"message":"70","line":2,"column":125,"nodeType":"59","messageId":"60","endLine":2,"endColumn":137},{"ruleId":"57","severity":1,"message":"71","line":4,"column":9,"nodeType":"59","messageId":"60","endLine":4,"endColumn":23},{"ruleId":"57","severity":1,"message":"72","line":10,"column":109,"nodeType":"59","messageId":"60","endLine":10,"endColumn":127},{"ruleId":"57","severity":1,"message":"73","line":10,"column":128,"nodeType":"59","messageId":"60","endLine":10,"endColumn":133},{"ruleId":"57","severity":1,"message":"74","line":13,"column":24,"nodeType":"59","messageId":"60","endLine":13,"endColumn":33},{"ruleId":"57","severity":1,"message":"75","line":9,"column":12,"nodeType":"59","messageId":"60","endLine":9,"endColumn":16},{"ruleId":"57","severity":1,"message":"76","line":9,"column":17,"nodeType":"59","messageId":"60","endLine":9,"endColumn":24},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'hour' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["79"],"'useContext' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'WiDayShowers' is defined but never used.","'AiOutlineClose' is defined but never used.","'weatherDescription' is assigned a value but never used.","'isDay' is assigned a value but never used.","'showInfo1' is assigned a value but never used.","'unit' is assigned a value but never used.","'setUnit' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [fetchData, link]",{"range":"82","text":"83"},[7539,7545],"[fetchData, link]"]